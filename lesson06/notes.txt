Fuction modifiers

    We have visibility modifiers that control when and where the function can be called from:
    private means it's only callable from other functions inside the contract; 
    internal is like private but can also be called by contracts that inherit from this one; 
    external can only be called outside the contract; 
    and finally public can be called anywhere, both internally and externally.

State modifiers

    We also have state modifiers, which tell us how the function interacts with the BlockChain:
    view tells us that by running the function, no data will be saved/changed.
    pure tells us that not only does the function not save any data to the blockchain, but it also doesn't read any data from the blockchain. 
    Both of these don't cost any gas to call if they're called externally from outside the contract (but they do cost gas if called internally by another function).


Custom modifiers

    onlyOwner and aboveLevel, for example. For these we can define custom logic to determine how they affect a function.

Payable modifiers

    It makes a special type of function that can receive ether. In ethereum, because both the money(ehter), the data(transaction payload), and the contract code
    itself all live on Ethereum, it's possible for you to call a function and pay money to the contact at the same time.

ERC20 token

    A token on ethereum is basically just a smart contract that follows some common rules - namely it implements a standard set of functions that all other token
    contracts share, such as transferFrom(address _from, address _to, uint256 _tokenId) and balanceOf(address _owner).

    Internally the smart contract usuallly has a mapping, mapping(address => uint256) balances, that keeps track of how much balance each address has.

    So basically a token is just a contract that keeps track of who owns how much of that token, and some functions so those users can transafer their tokens
    to other addresses.

    Since all ERC20 tokens share the same set of functions with the same names, they can all be interacted with in the same ways.

    This means if you build an application that is capable of interacting with one ERC20 token, it's also capable of interacting with any ERC20 token.
    That way more tokens can easily be added to your app in the future without needing to be scustom coded. You could simply plug in the new token contract address,
    and we can use another token it can use.


ERC721 token

    ERC721 tokens are not interchangeable since each one is assumed to be uique, and are not divisible.
    You can only trade them in whole units, and each one has a unique ID. So these are a perfect fit for making 
    our zombies tradeable.

    contract ERC721 {
            event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
            event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);

            function balanceOf(address _owner) external view returns (uint256);
            function ownerOf(uint256 _tokenId) external view returns (address);
            function transferFrom(address _from, address _to, uint256 _tokenId) external payable;
            function approve(address _approved, uint256 _tokenId) external payable;
}


    