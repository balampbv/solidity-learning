Fuction modifiers

We have visibility modifiers that control when and where the function can be called from:
 private means it's only callable from other functions inside the contract; 
 internal is like private but can also be called by contracts that inherit from this one; 
 external can only be called outside the contract; 
 and finally public can be called anywhere, both internally and externally.

State modifiers

We also have state modifiers, which tell us how the function interacts with the BlockChain:
 view tells us that by running the function, no data will be saved/changed.
 pure tells us that not only does the function not save any data to the blockchain, but it also doesn't read any data from the blockchain. 
 Both of these don't cost any gas to call if they're called externally from outside the contract (but they do cost gas if called internally by another function).


Custom modifiers

onlyOwner and aboveLevel, for example. For these we can define custom logic to determine how they affect a function.

Payable modifiers

It makes a special type of function that can receive ether. In ethereum, because both the money(ehter), the data(transaction payload), and the contract code
itself all live on Ethereum, it's possible for you to call a function and pay money to the contact at the same time.
